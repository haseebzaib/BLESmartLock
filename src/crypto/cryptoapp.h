#ifndef _CRYPTOAPP_H_
#define _CRYPTOAPP_H_

#include "app_defines.h"

#define CRYPTO_AES_BLOCK_SIZE 16

enum cryptoapp_status {
  cryptoapp_ok = 0,
  cryptoapp_err
};


enum cryptoapp_func {
  cryptoapp_impKeyndEncrypt = 0, //get key from somewhere and encrypt data
  cryptoapp_impKeyndDecrypt,
  cryptoapp_genKeyndEncrypt, //gen key and encrypt data
  cryptoapp_genKeyndDecrypt,
};

struct cryptoapp_packet {
 uint8_t *key;             /*Provide key if any avaiable, otherwise null*/
 size_t key_size;         /*size of the key mostly 16bytes dont exced for AES-128*/
 uint8_t *iv_buffer;      /*This is counter buffer, incase of encryption this is generated by nrf and incase of decryption this is received from the other side*/
 size_t iv_size;          /*size of of 16bytes dont exced for AES-128*/
 void *msgBuf;            /*This is message buffer used when encrypting this message*/
 size_t msgBuf_size;      /*Size of the content, if size of buffer is given then you will have to send whole buffer on other side*/
 void *encryptedMsgBuf;   /*Encrypted data stored in here, weather that data is from nrf doing encryption or received encrypted data from other side*/
 size_t encryptedMsgBuf_size; /*size of the content*/
 void *decryptedMsgBuf;      /*decrypted messages are stored here*/
 size_t decryptedMsgBuf_size; /*size of decrypted messages mostly same as encrypted msgbuf size*/
};


extern enum cryptoapp_status cryptoapp_run(enum cryptoapp_func sel_func,struct cryptoapp_packet *p_packet);
extern enum cryptoapp_status cryptoapp_init();
extern enum cryptoapp_status cryptoapp_finish();
extern enum cryptoapp_status cryptoapp_generateKey();
extern enum cryptoapp_status cryptoapp_importKey(uint8_t *key,size_t key_size);
extern enum cryptoapp_status cryptoapp_encryptMsg(void *encrypt_msg , size_t encrypt_size , void *encrypted_msg , size_t encrypted_size,uint8_t *iv_buffer,size_t iv_size);
extern enum cryptoapp_status cryptoapp_decryptMsg(void *encrypted_msg , size_t encrypted_size, void *decrypt_msg , size_t decrypt_size,uint8_t *iv_buffer,size_t iv_size );





#endif